正则表达式匹配过程中，如果子表达式匹配到的是字符内容，而非位置，并被保存到最终的匹配结果中，那么就认为这个子表达式是占有字符的；如果子表达式匹配的仅仅是位置，或者匹配的内容并不保存到最终的匹配结果中，那么就认为这个子表达式是零宽度的。
占有字符是互斥的，零宽度是非互斥的。也就是一个字符，同一时间只能由一个子表达式匹配，而一个位置，却可以同时由多个零宽度的子表达式匹配。
元字符：
    .  除换行以外的其他任意字符
    \s  空白字符
    \S   除空白字符以外的任意字符
    \w  字母、数字、下划线
    \W  除了字母、数字、下划线以外的任意字符
    \d   数字 0-9
    \D  除了数字之外的任意字符
    …… 等等等等
    \b  单词边界
    ^  字符串的开始
    $ 字符串结束
    (?=…)  环视(零宽断言) 后面的字符串符合表达式…的时候的位置
    (?!)
    *    0到无数次
    +   1到无数次
    ?  0 或者1 次
    {n}  重复N次
    {n,} 重复至少N次
     {n,m}   n到m次
    []  字符组，字符范围
    ()  捕获组（子表达式）

字符组：
    [0-9] 数字0到数组9之间的任意一个
    [a-z]  字母a到字母z的任意一个
    [^cfC]  除了字母  c   f    C的任意一个字符
    [\u4e00-\u9fa5] 汉字中的任意一个汉字 注
    [^a-z] 除了字母 a 到字母z的任意一个字符
    [^-a-c] 除了 -  字符以及字母a到字母z的任意一个字符
    |   多选分支，或者关系
    \1 \2 … 反向引用 < (\w)>.*</\1> 引用第一个捕获组的结果，用于匹配html的闭合标签